apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-service-account
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: traveller-role
  namespace: default
rules:
  - apiGroups: ["","extensions", "apps"]
    resources: ["configmaps", "secrets","services", "endpoints", "pods", "deployments", "replicasets"]
    verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: traveller-role-binding
  namespace: default
subjects:
  - kind: ServiceAccount
    name: my-service-account
    namespace: default
roleRef:
  kind: Role
  name: traveller-role
  apiGroup: rbac.authorization.k8s.io
---
# Deployment Configuration
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: traveller
  name: traveller
  namespace: default
spec:
  selector:
    matchLabels:
      app: traveller
  replicas: 1 # Number of replicas that will be created for this deployment
  template:
    metadata:
      labels:
        app: traveller
      name: traveller
      namespace: default
    spec:
      containers:
        - image: traveller:1.0.0
          imagePullPolicy: IfNotPresent
          name: container-0
          ports:
            - containerPort: 8081 # Internal port
              name: http
              protocol: TCP
          resources: {}
      restartPolicy: Always
      serviceAccount: my-service-account
      serviceAccountName: my-service-account
---
# Deployment Configuration
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: itenary
  name: itenary
  namespace: default
spec:
  selector:
    matchLabels:
      app: itenary
  replicas: 1 # Number of replicas that will be created for this deployment
  template:
    metadata:
      labels:
        app: itenary
      name: itenary
      namespace: default
    spec:
      containers:
        - image: itenary:1.0.0
          imagePullPolicy: IfNotPresent
          name: container-0
          ports:
            - containerPort: 8080 # Internal port
              name: http
              protocol: TCP
          resources: {}
      restartPolicy: Always
      serviceAccount: my-service-account
      serviceAccountName: my-service-account
---
apiVersion: v1
kind: Service
metadata:
  name: traveller-service
  namespace: default
spec:
  ports:
    - name: http
      port: 8081 # Internal port
      protocol: TCP
      targetPort: 8081 # The port exposed by the service
  selector:
    app: traveller
  type: LoadBalancer # type of the service. LoadBalancer indicates that our service will be external.
status:
  loadBalancer: { }
---
apiVersion: v1
kind: Service
metadata:
  name: itenary-service
  namespace: default
spec:
  ports:
    - name: http
      port: 8080 # Internal port
      protocol: TCP
      targetPort: 8080 # The port exposed by the service
  selector:
    app: itenary

